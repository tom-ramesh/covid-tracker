{"version":3,"sources":["components/InfoBox/InfoBox.js","utils/util.js","components/Map/Map.js","components/Table/Table.js","components/LineGraph/LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","props","Card","className","active","isRed","onClick","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","prettyPrintStat","stat","Map","countries","zoom","TileLayer","url","attribution","Table","options","plugins","legend","display","tooltip","mode","intersect","callbacks","label","tooltipItem","raw","y","elements","point","maintainAspectRatio","fill","scales","x","grid","type","time","unit","tooltipFormat","ticks","callback","value","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","cardProps","key","todayCases","todayRecovered","todayDeaths","FormControl","Select","variant","onChange","MenuItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5d8db31.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./infobox.css\";\r\n\r\nconst InfoBox = ({ title, cases, total, ...props }) => {\r\n  return (\r\n    <Card\r\n      className={`info-box ${props.active && \"info-box--selected\"} ${\r\n        props.isRed && \"info-box--red\"\r\n      }`}\r\n      onClick={props.onClick}\r\n    >\r\n      <CardContent>\r\n        <Typography className=\"info-box__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n        <h2\r\n          className={`info-box__cases ${\r\n            !props.isRed && \"info-box__cases--green\"\r\n          }`}\r\n        >\r\n          {cases}\r\n        </h2>\r\n        <Typography className=\"info-box__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default InfoBox;\r\n","import { Circle, Popup } from \"react-leaflet\";\r\nimport numeral from \"numeral\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204,16,52)\",\r\n    half_op: \"rgba(204,16,52,0.5)\",\r\n    multiplier: 200,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125,215,29)\",\r\n    half_op: \"rgba(125,215,29,0.5)\",\r\n    multiplier: 300,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251,68,67)\",\r\n    half_op: \"rgba(251,68,67,0.5)\",\r\n    multiplier: 800,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-containetr\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"No Cases\";\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"../../utils/util\";\r\nimport \"./map.css\";\r\n\r\nconst Map = ({ countries, center, zoom, casesType }) => {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png \"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport \"./table.css\";\r\n\r\nconst Table = ({ countries }) => {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr key={country}>\r\n          <td>{country}</td>\r\n          <td>{numeral(cases).format(\"0,0\")}</td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"chartjs-adapter-moment\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  plugins: {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    tooltip: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          return numeral(tooltipItem.raw.y).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  fill: true,\r\n  scales: {\r\n    x: {\r\n      grid: {\r\n        display: false,\r\n      },\r\n      type: \"time\",\r\n      time: {\r\n        unit: \"month\",\r\n        tooltipFormat: \"ll\",\r\n      },\r\n    },\r\n\r\n    y: {\r\n      grid: {\r\n        display: false,\r\n      },\r\n      ticks: {\r\n        callback: function (value, index, values) {\r\n          return numeral(value).format(\"0a\");\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n  const chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data[casesType]) {\r\n    if (lastDataPoint) {\r\n      const newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nconst LineGraph = ({ casesType = \"cases\", ...props }) => {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setData(buildChartData(data, casesType));\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204,16,52,0.3)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineGraph;\r\n","import { useState, useEffect } from \"react\";\nimport {\n  FormControl,\n  MenuItem,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./components/InfoBox/InfoBox\";\nimport Map from \"./components/Map/Map\";\nimport Table from \"./components/Table/Table\";\nimport { sortData, prettyPrintStat } from \"./utils/util\";\nimport LineGraph from \"./components/LineGraph/LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./App.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          setTableData(sortData(data));\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZom(4);\n      });\n  };\n\n  const cardProps = [\n    {\n      key: 1,\n      active: casesType === \"cases\",\n      isRed: true,\n      title: \"Coronavirus Cases\",\n      cases: prettyPrintStat(countryInfo.todayCases),\n      total: prettyPrintStat(countryInfo.cases),\n      onClick: () => setCasesType(\"cases\"),\n    },\n    {\n      key: 2,\n      active: casesType === \"recovered\",\n      title: \"Recovered\",\n      cases: prettyPrintStat(countryInfo.todayRecovered),\n      total: prettyPrintStat(countryInfo.recovered),\n      onClick: () => setCasesType(\"recovered\"),\n    },\n    {\n      key: 3,\n      active: casesType === \"deaths\",\n      isRed: true,\n      title: \"Deaths\",\n      cases: prettyPrintStat(countryInfo.todayDeaths),\n      total: prettyPrintStat(countryInfo.deaths),\n      onClick: () => setCasesType(\"deaths\"),\n    },\n  ];\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem key={country.value} value={country.value}>\n                  {country.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__status\">\n          {cardProps.map((props) => (\n            <InfoBox {...props} />\n          ))}\n        </div>\n        <Map\n          center={mapCenter}\n          zoom={mapZoom}\n          countries={mapCountries}\n          casesType={casesType}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graph-title\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}